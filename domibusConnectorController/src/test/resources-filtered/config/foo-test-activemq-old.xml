<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
				http://www.springframework.org/schema/beans
				http://www.springframework.org/schema/beans/spring-beans.xsd
				http://activemq.apache.org/schema/core
				http://activemq.apache.org/schema/core/activemq-core-5.4.0.xsd
		">

<broker xmlns="http://activemq.apache.org/schema/core"  brokerName="broker1" persistent="false" dataDirectory="./data/broker" schedulerSupport="true">

    <destinationPolicy>
        <policyMap>
            <policyEntries>
                <!-- Set the following policy on all queues using the '>' wildcard -->
                <policyEntry queue=">">
                    <deadLetterStrategy>
                        <!--
                            Use the prefix 'DLQ.' for the destination name, and make
                            the DLQ a queue rather than a topic
                        -->
                        <individualDeadLetterStrategy queuePrefix="DLQ." useQueueForQueueMessages="true"/>
                    </deadLetterStrategy>
                </policyEntry>

            </policyEntries>
        </policyMap>
    </destinationPolicy>

    <plugins>
        <redeliveryPlugin fallbackToDeadLetter="true"
                          sendToDlqIfMaxRetriesExceeded="true">
            <redeliveryPolicyMap>
                <redeliveryPolicyMap>
                    <redeliveryPolicyEntries>
                        <!-- a destination specific policy -->
                        <!--                            <redeliveryPolicy queue="SpecialQueue"-->
                        <!--                                              maximumRedeliveries="4"-->
                        <!--                                              redeliveryDelay="10000"/>-->


                    </redeliveryPolicyEntries>

                    <defaultEntry>
                        <!-- the fallback policy for all other destinations -->
                        <redeliveryPolicy maximumRedeliveries="0"
                                          initialRedeliveryDelay="1000"
                                          redeliveryDelay="1000"/>
                    </defaultEntry>
                </redeliveryPolicyMap>
            </redeliveryPolicyMap>
        </redeliveryPlugin>
    </plugins>


    <!-- destroy the spring context on shutdown to stop jetty -->
    <shutdownHooks>
        <bean xmlns="http://www.springframework.org/schema/beans" class="org.apache.activemq.hooks.SpringContextHook" />
    </shutdownHooks>

    <!--
            The managementContext is used to configure how ActiveMQ is exposed in
            JMX. By default, ActiveMQ uses the MBean server that is started by
            the JVM. For more information, see:
            http://activemq.apache.org/jmx.html
    -->
    <!--        <managementContext>-->
    <!--            <managementContext createConnector="true"/>-->
    <!--        </managementContext>-->

    <!--
        The systemUsage controls the maximum amount of space the broker will
        use before disabling caching and/or slowing down producers. For more information, see:
        http://activemq.apache.org/producer-flow-control.html
    -->
    <systemUsage>
        <systemUsage>
            <memoryUsage>
                <memoryUsage limit="100 mb" />
            </memoryUsage>
            <storeUsage>
                <storeUsage limit="50 mb"/>
            </storeUsage>
            <tempUsage>
                <tempUsage limit="50 mb"/>
            </tempUsage>
        </systemUsage>
    </systemUsage>

    <!--
            The transport connectors expose ActiveMQ over a given protocol to
            clients and other brokers. For more information, see:
            http://activemq.apache.org/configuring-transports.html
    -->
    <transportConnectors>
        <transportConnector name="vm" uri="vm://broker1"/>
    </transportConnectors>

</broker>

</beans>